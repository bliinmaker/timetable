# Generated by Django 5.0.6 on 2024-06-22 13:40

import django.db.models.deletion
import timetable_app.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_modified], verbose_name='modified')),
                ('title', models.CharField(max_length=50, verbose_name='faculty')),
                ('code_faculty', models.CharField(max_length=50, verbose_name='code faculty')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'faculty',
                'verbose_name_plural': 'faculties',
                'db_table': 'faculty',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_modified], verbose_name='modified')),
                ('title', models.CharField(max_length=50, verbose_name='title')),
            ],
            options={
                'verbose_name': 'subject',
                'verbose_name_plural': 'subjects',
                'db_table': 'subject',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('username', models.CharField(max_length=50)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'app_user',
                'verbose_name_plural': 'app_users',
                'db_table': 'app_user',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_modified], verbose_name='modified')),
                ('title', models.CharField(max_length=50, verbose_name='group')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable_app.faculty', verbose_name='faculty')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'db_table': 'group',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_modified], verbose_name='modified')),
                ('full_name', models.CharField(max_length=50, verbose_name='full name')),
                ('group', models.ForeignKey(blank=True, db_column='group_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable_app.group', verbose_name='group')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'db_table': 'student',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='SubjectGroup',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('group', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, to='timetable_app.group')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable_app.subject')),
            ],
            options={
                'db_table': 'subject__group',
                'unique_together': {('subject', 'group')},
            },
        ),
        migrations.AddField(
            model_name='subject',
            name='groups',
            field=models.ManyToManyField(through='timetable_app.SubjectGroup', to='timetable_app.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='group',
            name='subjects',
            field=models.ManyToManyField(through='timetable_app.SubjectGroup', to='timetable_app.subject', verbose_name='subjects'),
        ),
        migrations.CreateModel(
            name='SubjectTeacher',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable_app.subject')),
            ],
            options={
                'db_table': 'subject_teacher',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_modified], verbose_name='modified')),
                ('full_name', models.CharField(max_length=50, verbose_name='full name')),
                ('subjects', models.ManyToManyField(through='timetable_app.SubjectTeacher', to='timetable_app.subject', verbose_name='subjects')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'teacher',
                'verbose_name_plural': 'teachers',
                'db_table': 'teacher',
                'ordering': ['full_name'],
            },
        ),
        migrations.AddField(
            model_name='subjectteacher',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable_app.teacher'),
        ),
        migrations.AddField(
            model_name='subject',
            name='teachers',
            field=models.ManyToManyField(through='timetable_app.SubjectTeacher', to='timetable_app.teacher', verbose_name='teachers'),
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(blank=True, default=timetable_app.models.get_datetime, null=True, validators=[timetable_app.models.check_modified], verbose_name='modified')),
                ('date', models.DateField(null=True, verbose_name='date')),
                ('lesson_slot', models.IntegerField(choices=[(1, 'Первая пара'), (2, 'Вторая пара'), (3, 'Третья пара'), (4, 'Четвертая пара'), (5, 'Пятая пара'), (6, 'Шестая пара')], null=True, verbose_name='lesson slot')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable_app.group', verbose_name='group')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable_app.subject', verbose_name='subject')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='timetable_app.teacher', verbose_name='teacher')),
            ],
            options={
                'verbose_name': 'lesson',
                'verbose_name_plural': 'lessons',
                'db_table': 'lesson',
                'ordering': ['start_time'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='subjectteacher',
            unique_together={('subject', 'teacher')},
        ),
    ]
